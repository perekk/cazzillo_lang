	processor 6502 ; TEH BEAST
	ORG $0801 ; BASIC STARTS HERE
	HEX 0C 08 0A 00 9E 20 32 30 36 34 00 00 00
	ORG $0810 ; MY PROGRAM STARTS HERE
	JSR INITSTACK
	; 1:7 VAL 12365
	LDA #48
	STA STACKACCESS+1
	LDA #77
	STA STACKACCESS
	JSR PUSH16
	; 1:15 VAL 20
	LDA #0
	STA STACKACCESS+1
	LDA #20
	STA STACKACCESS
	JSR PUSH16
	; 1:20 VAL 30
	LDA #0
	STA STACKACCESS+1
	LDA #30
	STA STACKACCESS
	JSR PUSH16
	; 1:18 <
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BCC L1
	BNE L2
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BCC L1
L2: LDA #00
	JMP L3
L1: LDA #01
L3: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 1:13 +
	JSR ADD16
	; 1:25 VAL 10
	LDA #0
	STA STACKACCESS+1
	LDA #10
	STA STACKACCESS
	JSR PUSH16
	; 1:30 VAL 15
	LDA #0
	STA STACKACCESS+1
	LDA #15
	STA STACKACCESS
	JSR PUSH16
	; 1:28 <
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BCC L4
	BNE L5
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BCC L4
L5: LDA #00
	JMP L6
L4: LDA #01
L6: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 1:23 +
	JSR ADD16
	; 1:35 VAL 30
	LDA #0
	STA STACKACCESS+1
	LDA #30
	STA STACKACCESS
	JSR PUSH16
	; 1:40 VAL 10
	LDA #0
	STA STACKACCESS+1
	LDA #10
	STA STACKACCESS
	JSR PUSH16
	; 1:38 <
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BCC L7
	BNE L8
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BCC L7
L8: LDA #00
	JMP L9
L7: LDA #01
L9: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 1:33 +
	JSR ADD16
	; 1:1 print
	JSR POP16
	JSR PRINT_INT
	; 2:7 VAL 1064
	LDA #4
	STA STACKACCESS+1
	LDA #40
	STA STACKACCESS
	JSR PUSH16
	; 2:14 VAL 1
	LDA #0
	STA STACKACCESS+1
	LDA #1
	STA STACKACCESS
	JSR PUSH16
	; 2:18 VAL 0
	LDA #0
	STA STACKACCESS+1
	LDA #0
	STA STACKACCESS
	JSR PUSH16
	; 2:16 =
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BNE L10
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BNE L10
	LDA #01
	JMP L11
L10: LDA #00
L11: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 2:12 +
	JSR ADD16
	; 2:22 VAL 255
	LDA #0
	STA STACKACCESS+1
	LDA #255
	STA STACKACCESS
	JSR PUSH16
	; 2:28 VAL 255
	LDA #0
	STA STACKACCESS+1
	LDA #255
	STA STACKACCESS
	JSR PUSH16
	; 2:26 =
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BNE L12
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BNE L12
	LDA #01
	JMP L13
L12: LDA #00
L13: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 2:20 +
	JSR ADD16
	; 2:1 print
	JSR POP16
	JSR PRINT_INT
	; 3:7 VAL 90
	LDA #0
	STA STACKACCESS+1
	LDA #90
	STA STACKACCESS
	JSR PUSH16
	; 3:12 VAL 32
	LDA #0
	STA STACKACCESS+1
	LDA #32
	STA STACKACCESS
	JSR PUSH16
	; 3:17 VAL 33
	LDA #0
	STA STACKACCESS+1
	LDA #33
	STA STACKACCESS
	JSR PUSH16
	; 3:15 >
	LDA STACKBASE + 2,X
	CMP STACKBASE + 4,X
	BCC L14
	BNE L15
	LDA STACKBASE + 1,X
	CMP STACKBASE + 3,X
	BCC L14
L15: LDA #00
	JMP L16
L14: LDA #01
L16: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 3:10 -
	JSR SUB16
	; 3:1 print
	JSR POP16
	JSR PRINT_INT
	; 4:7 VAL 0
	LDA #0
	STA STACKACCESS+1
	LDA #0
	STA STACKACCESS
	JSR PUSH16
	; 4:11 VAL 255
	LDA #0
	STA STACKACCESS+1
	LDA #255
	STA STACKACCESS
	JSR PUSH16
	; 4:17 VAL 1
	LDA #0
	STA STACKACCESS+1
	LDA #1
	STA STACKACCESS
	JSR PUSH16
	; 4:15 >
	LDA STACKBASE + 2,X
	CMP STACKBASE + 4,X
	BCC L17
	BNE L18
	LDA STACKBASE + 1,X
	CMP STACKBASE + 3,X
	BCC L17
L18: LDA #00
	JMP L19
L17: LDA #01
L19: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	; 4:9 -
	JSR SUB16
	; 4:1 print
	JSR POP16
	JSR PRINT_INT
	RTS
AUX_REG DS 1 ; USED IN ADD INSTRUCTION
BCD DS 3 ; USED IN BIN TO BCD
	; stack.a65 from https://github.com/dourish/mitemon/blob/master/stack.a65
STACKACCESS = $0080
STACKBASE = $0000
INITSTACK:
	LDX #$FF
	RTS
PUSH16:
	LDA STACKACCESS + 1
	STA STACKBASE,X
	DEX
	LDA STACKACCESS
	STA STACKBASE,X
	DEX
	RTS
POP16:
	LDA STACKBASE + 1,X
	STA STACKACCESS
	INX
	LDA STACKBASE + 1,X
	STA STACKACCESS + 1
	INX
	RTS
DUP16:
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	RTS
SWAP16:
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 5,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 6,X
	STA STACKBASE + 4,X
	LDA STACKBASE + 1,X
	STA STACKBASE + 5,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 6,X
	INX
	INX
	RTS
ADD16:
	CLC
	LDA STACKBASE + 1,X;
	ADC STACKBASE + 3,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 2,X
	ADC STACKBASE + 4,X
	STA STACKBASE + 4,X
	INX
	INX
	RTS
SUB16:
	SEC
	LDA STACKBASE + 3,X
	SBC STACKBASE + 1,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 4,X
	SBC STACKBASE + 2,X
	STA STACKBASE + 4,X
	INX
	INX
	RTS
BINBCD16: SED
	LDA #0
	STA BCD + 0
	STA BCD + 1
	STA BCD + 2
	LDX #16
CNVBIT: ASL STACKACCESS + 0
	ROL STACKACCESS + 1
	LDA BCD + 0
	ADC BCD + 0
	STA BCD + 0
	LDA BCD + 1
	ADC BCD + 1
	STA BCD + 1
	LDA BCD + 2
	ADC BCD + 2
	STA BCD + 2
	DEX
	BNE CNVBIT
	CLD
	RTS
PRINT_INT:
	JSR BINBCD16
	LDA BCD+2
	TAY
	BEQ DIGIT2
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
DIGIT2:
	LDA BCD+1
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_2
	CPY #00
	BEQ DIGIT_3
PRINT_DIGIT_2:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_3:
	LDA BCD+1
	AND #$0F
	BNE PRINT_DIGIT_3
	CPY #00
	BEQ DIGIT_4
PRINT_DIGIT_3:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_4:
	LDA BCD+0
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_4
	CPY #00
	BEQ DIGIT_5
PRINT_DIGIT_4:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_5:
	LDA BCD+0
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
	LDA #13
	JSR $FFD2
	RTS