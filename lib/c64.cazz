include "lib/std.cazz"

def 'SCREEN_START' '1024'
def 'SCREEN_SIZE' '1000'

define 'cls' '[emit 147 !<]

'time :[[ 256 * peek 161] + peek 162]

// RANDOM
define 'start_random' '[
  poke 0xd40e 0xff
  poke 0xd40f 0xff
  poke 0xd412 0x80
]

'rand_bit :[
  'r 0 !<
  'a 0
  a: r !addr
  asm ["LDA $D41B" "AND #1" "STA !a"]
  r
]

'rand_bool :[
  'r 0 !<
  'a 0
  a: r !addr
  asm ["LDA $D41B" "AND #1" "STA !a"]
  r !bool
]


define 'rand_byte' '[[peek 0xD41B]]
define 'rand_word' '[[rand_byte * 256 + rand_byte]]
'rnd :['limit Number rand_word % limit]

; 'rnd :['limit Number
;   either limit < 257 [
;     'r rand_byte 
;     while true [
;       if r < limit [return r !n]
;       r: rand_byte
;     ]
;     0
;   ] [
;     'r rand_word 
;     while true [
;       if r < limit [return r]
;       r: rand_word
;     ]
;     0
;   ]
; ]  

'gotoxy :['col Byte 'row Byte
  either col >= 0 !< and col <= 39 !< and row >= 0 !< and row <= 25 !< [
    'cursor 1024 + row * 40 + col     
    'cursorlo cursor !<
    'cursorhi [cursor / 256] !<
    asm [
      "; GOTOXY"
      "LDA !col"
      "STA CURX"
      "LDA !row"
      "STA CURY"
      "LDA !cursorlo"
      "STA CURSOR"
      "LDA !cursorhi"
      "STA CURSOR+1"
    ]    
    cursorlo: 0 !<
    cursorhi: 0 !<  
  ] [
    print "GOTOXY OUT OF BOUNDS"
  ]
]

'box_top :['w Number
  'hor_char [99  !<]
  'nw_char  [213 !<]
  'ne_char  [201 !<]
  'quote    [34  !<]
  'concat   " . "

  emit quote
  emit nw_char 
  emit quote
  prin concat
  'w2 w - 2
  loop 'i' 'w2' '[emit quote emit hor_char emit quote prin concat]
  emit quote
  emit nw_char 
  emit quote
]

'box :['x Number 'y Number 'w Number 'h Number
  define 'hor_char' '[99 !<]
  define 'ver_char' '[194 !<]
  define 'nw_char'  '[213 !<]
  define 'ne_char'  '[201 !<]
  define 'sw_char'  '[202 !<]
  define 'se_char'  '[203 !<]

  'x2 [x + w - 1] !<
  'y2 [y + h - 1] !<
  
  'ww w - 2
  'hh h - 2
  loop 'i' 'ww' '[ 'xx [x + i + 1] !< gotoxy xx y !< emit hor_char gotoxy xx y2 emit hor_char ]
  loop 'i' 'hh' '[ 'yy [y + i + 1] !< gotoxy x !< yy emit ver_char gotoxy x2 yy emit ver_char ]
  gotoxy x !< y !< emit nw_char
  gotoxy [x + w - 1] !< y !< emit ne_char
  gotoxy x !< [y + h - 1] !< emit sw_char
  gotoxy [x + w - 1] !< [y + h - 1] !< emit se_char
]

define 'scroll_up' '[asm "JSR SCROLL_UP"]

; 2024-02-27 decrement byte
; 'dec :[
;   'w Word Number
;   'str_asm si "DEC !{w}"
;   '[ asm "{str_asm}"]  
; ]

; 2024-03-19 decrement with word typing
'dec :[
  'w Word Number
  'addr_on_tos "ADR !" . w !str  
  '[ asm [
    "{addr_on_tos}"
    "JSR POP16"
    "LDY #0"
    "SEC"
    "LDA (STACKACCESS),Y"
    "SBC #1"
    "STA (STACKACCESS),Y"
    "BPL positive_@"
    "INY"
    "LDA (STACKACCESS),Y"
    "SEC"
    "SBC #1"
    "STA (STACKACCESS),Y"
    "positive_@:"
  ]]  
]

'dec :[
  'w Word Byte
  'str_asm "DEC !" . w !str
  '[ asm "{str_asm}"]  
]

; 2024-03-20
'print_heap :[ 
    '[ asm [
        "LDA HEAPTOP"        
        "STA STACKACCESS"
        "LDA HEAPTOP + 1"        
        "STA STACKACCESS + 1"        
        "JSR PRINT_INT"
        "LDA #13"
        "JSR EMIT"
    ]]
]