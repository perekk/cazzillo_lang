'add1 :[ '[ 1 +] ]
prin "ADD1 SHOULD BE 3: " print add1 2

'++ :[postfix '[ + 1] ]
prin "++ SHOULD BE 3: " print 2 ++

'addn :['n Number '[{n} +] ]
prin "ADDN SHOULD BE 3: " print addn 1 2
prin "ADDN SHOULD BE 5: " print addn 1 + 1 3

'add1lm :[ 
    '[asm [
        "; ins: byte" 
        "; out: byte"
        "JSR POP16"
        "INC STACKACCESS"        
        "JSR PUSH16"
    ]]
 ]

'k 2 !<
prin "ADDLM SHOULD BE 3: " print add1lm k 
prin "ADDLM IN PLACE SHOULD BE 3: " print asm [
    "; ins: byte"
    "; out: byte"
    "JSR POP16"
    "INC STACKACCESS"
    "JSR PUSH16"
] k

print "----- NESTED MACROS -----"
prin "10 ADD1 SHOULD BE 10: " print add1 add1 add1 add1 add1 add1 add1 add1 add1 1

'a :[ '[ 2 *] ]
'b :[ '[ a a ] ]

prin "B A SHOULD BE 16: " print b a 2
prin "A B SHOULD BE 16: " print a b 2

