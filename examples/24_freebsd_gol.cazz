include "lib/std.cazz"
include "lib/freebsd.cazz"

def W 20
def H 10
'board array W * H Number
'board2 array W * H Number

// .*.
// ..*
// ***
'put_glider :[
  'x Number
  'y Number
  'base y * W + x
  change board base + 1 1
  change board base + W + 2 1
  change board base + W + W + 0 1
  change board base + W + W + 1 1
  change board base + W + W + 2 1
]

'init_board :['b array Number
  'i 0
  while i < W * H [
    change b i 0
    inc i
  ]
]

'display_board :['b array Number
  'i 0
  while i < W * H [            
    prin either b at [i] = 0 ["."] ["O"]    
    inc i
    if i % W = 0 [print ""]
  ]
  emit 27 !< prin "[" prin H prin "A"
  emit 27 !< prin "[" prin W prin "D"
]

'get_alives :['i Number
  'ret 0  
  if board at [i - W - 1] = 1 [inc ret]
  if board at [i - W - 0] = 1 [inc ret]
  if board at [i - W + 1] = 1 [inc ret]
  if board at [i - 0 - 1] = 1 [inc ret]  
  if board at [i - 0 + 1] = 1 [inc ret]  
  if board at [i + W - 1] = 1 [inc ret]
  if board at [i + W - 0] = 1 [inc ret]
  if board at [i + W + 1] = 1 [inc ret]
  ret
]

'compute_next_state :['cell_index Number
  'alive get_alives cell_index
  'cell_state board at cell_index
  either cell_state = 1 [
    cell_state: 0
    if alive = 2 [cell_state: 1]
    if alive = 3 [cell_state: 1]
  ] [
    if alive = 3 [cell_state: 1]
  ]  
  cell_state
]

'step :[
  'i W + 1
  while i < W * [H - 1] - 2 [
    change board2 i compute_next_state i    
    inc i
  ]
]

'swap_board :[
  'i 0
  while i < W * H [
    change board i board2 at i
    inc i
  ]
]

init_board board
init_board board2
put_glider 2 2
put_glider 12 0
display_board board

while true [
  step
  swap_board
  display_board board
  nanosleep 200
]





