	processor 6502 ; TEH BEAST
	ORG $0801 ; BASIC STARTS HERE
	HEX 0C 08 0A 00 9E 20 32 30 36 34 00 00 00
	ORG $0810 ; MY PROGRAM STARTS HERE
	; INIT HEAP
	LDA #<HEAPSTART
	STA HEAPTOP
	LDA #>HEAPSTART
	STA HEAPTOP+1
	JSR INITSTACK
	JMP AFTER_0
CALL_0:
	; 1:12 BYTE VAL 69
	LDA #69
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 1: 11 BLOCK [...] type: byte
	; 1: 8 FN fn type: addr
	RTS
AFTER_0:
	LDA #<CALL_0
	STA STACKACCESS
	LDA #>CALL_0
	STA STACKACCESS + 1
	JSR PUSH16
	; 1: 1 LIT_WORD const type: void
	JSR POP16
	LDA STACKACCESS
	STA V_const
	LDA STACKACCESS + 1
	STA V_const + 1
	JMP AFTER_1
CALL_1:
	; 2:13 BOOL VAL false
	LDA #0
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 2: 1 BLOCK [...] type: boolean
	; 2: 9 FN fn type: addr
	RTS
AFTER_1:
	LDA #<CALL_1
	STA STACKACCESS
	LDA #>CALL_1
	STA STACKACCESS + 1
	JSR PUSH16
	; 2: 1 LIT_WORD const2 type: void
	JSR POP16
	LDA STACKACCESS
	STA V_const2
	LDA STACKACCESS + 1
	STA V_const2 + 1
	JMP AFTER_2
CALL_2:
	; 3:13 BYTE VAL 2
	LDA #2
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 3:17 BYTE VAL 3
	LDA #3
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 3:21 BYTE VAL 4
	LDA #4
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 3: 19 MULT * type: number
	JSR MUL16
	; 3: 15 PLUS + type: number
	JSR ADD16
	; 2: 13 BLOCK [...] type: number
	; 3: 9 FN fn type: addr
	RTS
AFTER_2:
	LDA #<CALL_2
	STA STACKACCESS
	LDA #>CALL_2
	STA STACKACCESS + 1
	JSR PUSH16
	; 3: 1 LIT_WORD const3 type: void
	JSR POP16
	LDA STACKACCESS
	STA V_const3
	LDA STACKACCESS + 1
	STA V_const3 + 1
	JMP AFTER_3
CALL_3:
	; 4:13 STRING VAL CAZZ
	LDA #0
	STA STACKACCESS+1
	LDA #4
	STA STACKACCESS
	JSR PUSH16
	LDA #>str0
	STA STACKACCESS+1
	LDA #<str0
	STA STACKACCESS
	JSR PUSH16
	; 4:17 STRING VAL ILLO
	LDA #0
	STA STACKACCESS+1
	LDA #4
	STA STACKACCESS
	JSR PUSH16
	LDA #>str1
	STA STACKACCESS+1
	LDA #<str1
	STA STACKACCESS
	JSR PUSH16
	; 4: 15 STR_JOIN . type: string
	NOP
	NOP
	NOP
	LDA HEAPTOP
	STA HEAPSAVE
	LDA HEAPTOP+1
	STA HEAPSAVE+1
	LDX SP16
	LDA STACKBASE + 5,X
	STA FROMADD + 1
	LDA STACKBASE + 6,X
	STA FROMADD + 2
	LDA HEAPTOP
	STA TOADD + 1
	LDA HEAPTOP + 1
	STA TOADD + 2
	LDA STACKBASE + 7,X
	STA HEAPSAVE + 2
	TAY
	JSR COPYMEM
	LDA STACKBASE + 1,X
	STA FROMADD + 1
	LDA STACKBASE + 2,X
	STA FROMADD + 2
	LDX SP16
	LDA STACKBASE + 3,X
	TAY
	CLC
	ADC HEAPSAVE + 2
	STA HEAPSAVE + 2
	JSR COPYMEM
	LDA TOADD+1
	STA HEAPTOP
	LDA TOADD+2
	STA HEAPTOP+1
	LDA SP16
	ADC #8
	STA SP16
	LDA HEAPSAVE+2
	STA STACKACCESS
	LDA #0
	STA STACKACCESS + 1
	JSR PUSH16
	LDA HEAPSAVE
	STA STACKACCESS
	LDA HEAPSAVE+1
	STA STACKACCESS+1
	JSR PUSH16
	; 3: 9 BLOCK [...] type: string
	; 4: 9 FN fn type: addr
	RTS
AFTER_3:
	LDA #<CALL_3
	STA STACKACCESS
	LDA #>CALL_3
	STA STACKACCESS + 1
	JSR PUSH16
	; 4: 1 LIT_WORD const4 type: void
	JSR POP16
	LDA STACKACCESS
	STA V_const4
	LDA STACKACCESS + 1
	STA V_const4 + 1
	JMP AFTER_4
CALL_4:
	; 6: 11 WORD const type: ()=>byte
	LDA V_const
	STA CALL_FUN_22 + 1
	LDA V_const + 1
	STA CALL_FUN_22 + 2
CALL_FUN_22:
	JSR $1111 ; will be overwritten
	; 6: 5 PRINT print type: void
	JSR POP16
	LDA #0
	STA STACKACCESS + 1
	JSR PRINT_INT
	LDA #13
	JSR $FFD2
	; 7: 11 WORD const2 type: ()=>boolean
	LDA V_const2
	STA CALL_FUN_24 + 1
	LDA V_const2 + 1
	STA CALL_FUN_24 + 2
CALL_FUN_24:
	JSR $1111 ; will be overwritten
	; 7: 5 PRINT print type: void
	JSR POP16
	LDA STACKACCESS
	BNE print_true25
	LDA STACKACCESS + 1
	BNE print_true25
	LDA #78 ; 'N'
	JMP print_bool25
print_true25:
	LDA #89 ; 'Y'
print_bool25:
	JSR $FFD2
	LDA #13
	JSR $FFD2
	; 8: 11 WORD const3 type: ()=>number
	LDA V_const3
	STA CALL_FUN_26 + 1
	LDA V_const3 + 1
	STA CALL_FUN_26 + 2
CALL_FUN_26:
	JSR $1111 ; will be overwritten
	; 8: 5 PRINT print type: void
	JSR POP16
	JSR PRINT_INT
	LDA #13
	JSR $FFD2
	; 9: 11 WORD const4 type: ()=>string
	LDA V_const4
	STA CALL_FUN_28 + 1
	LDA V_const4 + 1
	STA CALL_FUN_28 + 2
CALL_FUN_28:
	JSR $1111 ; will be overwritten
	; 9: 5 PRINT print type: void
	JSR PRINT_STRING
	LDA #13
	JSR $FFD2
	; 10:10 STRING VAL LOG 
	LDA #0
	STA STACKACCESS+1
	LDA #4
	STA STACKACCESS
	JSR PUSH16
	LDA #>str2
	STA STACKACCESS+1
	LDA #<str2
	STA STACKACCESS
	JSR PUSH16
	; 10: 5 PRIN prin type: void
	JSR PRINT_STRING
	; 11:10 STRING VAL SI 
	LDA #0
	STA STACKACCESS+1
	LDA #3
	STA STACKACCESS
	JSR PUSH16
	LDA #>str3
	STA STACKACCESS+1
	LDA #<str3
	STA STACKACCESS
	JSR PUSH16
	; 11: 5 PRIN prin type: void
	JSR PRINT_STRING
	; 12:11 STRING VAL FUNGE!
	LDA #0
	STA STACKACCESS+1
	LDA #6
	STA STACKACCESS
	JSR PUSH16
	LDA #>str4
	STA STACKACCESS+1
	LDA #<str4
	STA STACKACCESS
	JSR PUSH16
	; 12: 5 PRINT print type: void
	JSR PRINT_STRING
	LDA #13
	JSR $FFD2
	; 3: 15 BLOCK [...] type: void
	; 5: 6 FN fn type: addr
	RTS
AFTER_4:
	LDA #<CALL_4
	STA STACKACCESS
	LDA #>CALL_4
	STA STACKACCESS + 1
	JSR PUSH16
	; 5: 1 LIT_WORD log type: void
	JSR POP16
	LDA STACKACCESS
	STA V_log
	LDA STACKACCESS + 1
	STA V_log + 1
	JMP AFTER_5
CALL_5:
	TSX
	TXA
	SEC
	SBC #4
	TAX
	TXS
	JMP AFTER_6
CALL_6:
	; 16:25 STRING VAL -------
	LDA #0
	STA STACKACCESS+1
	LDA #7
	STA STACKACCESS
	JSR PUSH16
	LDA #>str5
	STA STACKACCESS+1
	LDA #<str5
	STA STACKACCESS
	JSR PUSH16
	; 16: 19 PRINT print type: void
	JSR PRINT_STRING
	LDA #13
	JSR $FFD2
	; 4: 1 BLOCK [...] type: void
	; 16: 15 FN fn type: addr
	RTS
AFTER_6:
	LDA #<CALL_6
	STA STACKACCESS
	LDA #>CALL_6
	STA STACKACCESS + 1
	JSR PUSH16
	; 16: 5 LIT_WORD drawline type: void
	JSR POP16
	TSX
	TXA
	CLC
	ADC #1
	TAX
	LDA STACKACCESS
	STA $0100,X
	LDA STACKACCESS + 1
	STA $0101,X
	; 17: 8 NUMBER number type: number
	LDA #0
	STA STACKACCESS
	STA STACKACCESS+1
	JSR PUSH16
	; 17: 5 LIT_WORD i type: void
	JSR POP16
	TSX
	TXA
	CLC
	ADC #3
	TAX
	LDA STACKACCESS
	STA $0100,X
	LDA STACKACCESS + 1
	STA $0101,X
startloop55:
	; 18: 11 WORD i type: number
	TSX
	TXA
	CLC
	ADC #3
	TAX
	LDA $0100,X
	STA STACKACCESS
	LDA $0101,X
	STA STACKACCESS + 1
	JSR PUSH16
	; 18:15 BYTE VAL 10
	LDA #10
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 18: 13 LT < type: boolean
	LDX SP16
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BCC less48
	BNE greaterorequal48
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BCC less48
greaterorequal48:
	LDA #00
	JMP store48
less48:
	LDA #01
store48:
	INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2,X
	STX SP16
	JSR POP16
	LDA STACKACCESS
	BNE trueblock55
	LDA STACKACCESS + 1
	BNE trueblock55
	JMP endblock55 ; if all zero
trueblock55:
	; 19: 9 WORD drawline type: ()=>void
	TSX
	TXA
	CLC
	ADC #1
	TAX
	LDA $0100,X
	STA CALL_FUN_49 + 1
	LDA $0101,X
	STA CALL_FUN_49 + 2
CALL_FUN_49:
	JSR $1111 ; will be overwritten
	; 20: 12 WORD i type: number
	TSX
	TXA
	CLC
	ADC #3
	TAX
	LDA $0100,X
	STA STACKACCESS
	LDA $0101,X
	STA STACKACCESS + 1
	JSR PUSH16
	; 20:16 BYTE VAL 1
	LDA #1
	STA STACKACCESS
	LDA #0
	STA STACKACCESS+1
	JSR PUSH16
	; 20: 14 PLUS + type: number
	JSR ADD16
	; 20: 9 SET_WORD i type: void
	JSR POP16
	TSX
	TXA
	CLC
	ADC #3
	TAX
	LDA STACKACCESS
	STA $0100,X
	LDA STACKACCESS + 1
	STA $0101,X
	; 5: 1 BLOCK [...] type: void
	; 18: 5 WHILE while type: void
	JMP startloop55
endblock55:
	; 22: 5 WORD log type: ()=>void
	LDA V_log
	STA CALL_FUN_56 + 1
	LDA V_log + 1
	STA CALL_FUN_56 + 2
CALL_FUN_56:
	JSR $1111 ; will be overwritten
	; 3: 21 BLOCK [...] type: void
	TSX
	TXA
	CLC
	ADC #4
	TAX
	TXS
	; 15: 7 FN fn type: addr
	RTS
AFTER_5:
	LDA #<CALL_5
	STA STACKACCESS
	LDA #>CALL_5
	STA STACKACCESS + 1
	JSR PUSH16
	; 15: 1 LIT_WORD test type: void
	JSR POP16
	LDA STACKACCESS
	STA V_test
	LDA STACKACCESS + 1
	STA V_test + 1
	; 25: 1 WORD test type: ()=>void
	LDA V_test
	STA CALL_FUN_60 + 1
	LDA V_test + 1
	STA CALL_FUN_60 + 2
CALL_FUN_60:
	JSR $1111 ; will be overwritten
	; 1: 1 BLOCK [prog] type: void
	RTS
BCD DS 3 ; USED IN BIN TO BCD
HEAPSAVE DS 3 ; USED IN COPYSTRING
AUXMUL DS 2
HEAPTOP DS 2
TEST_UPPER_BIT: BYTE $80
SP16 = $7F
STACKACCESS = $0080
STACKBASE = $0000
COPYMEM:
	TYA
	BEQ ENDCOPY
FROMADD:
	LDA $1111
TOADD:
	STA $1111
	INC FROMADD + 1
	BCC COPY_NO_CARRY1
	INC FROMADD + 2
COPY_NO_CARRY1:
	INC TOADD + 1
	BCC COPY_NO_CARRY2
	INC TOADD + 2
COPY_NO_CARRY2:
	DEY
	BNE COPYMEM
ENDCOPY:
	RTS
PRINT_STRING:
	JSR POP16
	LDX SP16
	LDA STACKBASE + 1,X; LEN
	INX
	INX
	STX SP16
	TAX; NOW IN X WE HAVE THE LEN
	BEQ EXIT_PRINT_STR
	LDY #0
LOOP_PRINT_STRING:
	LDA (STACKACCESS),Y
	JSR $FFD2
	INY
	DEX
	BNE LOOP_PRINT_STRING
EXIT_PRINT_STR:
	RTS
	; stack.a65 from https://github.com/dourish/mitemon/blob/master/stack.a65
INITSTACK:
	LDX #$FF
	STX SP16
	RTS
PUSH16:
	LDX SP16
	LDA STACKACCESS + 1
	STA STACKBASE,X
	DEX
	LDA STACKACCESS
	STA STACKBASE,X
	DEX
	STX SP16
	RTS
POP16:
	LDX SP16
	LDA STACKBASE + 1,X
	STA STACKACCESS
	INX
	LDA STACKBASE + 1,X
	STA STACKACCESS + 1
	INX
	STX SP16
	RTS
DUP16:
	LDX SP16
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	STX SP16
	RTS
SWAP16:
	LDX SP16
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 5,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 6,X
	STA STACKBASE + 4,X
	LDA STACKBASE + 1,X
	STA STACKBASE + 5,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 6,X
	INX
	INX
	STX SP16
	RTS
ADD16:
	LDX SP16
	CLC
	LDA STACKBASE + 1,X;
	ADC STACKBASE + 3,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 2,X
	ADC STACKBASE + 4,X
	STA STACKBASE + 4,X
	INX
	INX
	STX SP16
	RTS
SUB16:
	LDX SP16
	SEC
	LDA STACKBASE + 3,X
	SBC STACKBASE + 1,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 4,X
	SBC STACKBASE + 2,X
	STA STACKBASE + 4,X
	INX
	INX
	STX SP16
	RTS
BINBCD16: SED
	LDA #0
	STA BCD + 0
	STA BCD + 1
	STA BCD + 2
	LDX #16
CNVBIT: ASL STACKACCESS + 0
	ROL STACKACCESS + 1
	LDA BCD + 0
	ADC BCD + 0
	STA BCD + 0
	LDA BCD + 1
	ADC BCD + 1
	STA BCD + 1
	LDA BCD + 2
	ADC BCD + 2
	STA BCD + 2
	DEX
	BNE CNVBIT
	CLD
	RTS
PRINT_INT:
	JSR BINBCD16
	LDA BCD+2
	TAY
	BEQ DIGIT2
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
DIGIT2:
	LDA BCD+1
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_2
	CPY #00
	BEQ DIGIT_3
PRINT_DIGIT_2:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_3:
	LDA BCD+1
	AND #$0F
	BNE PRINT_DIGIT_3
	CPY #00
	BEQ DIGIT_4
PRINT_DIGIT_3:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_4:
	LDA BCD+0
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_4
	CPY #00
	BEQ DIGIT_5
PRINT_DIGIT_4:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_5:
	LDA BCD+0
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
	RTS
MUL16:
	LDX SP16
	LDA STACKBASE + 3,X    ; Get the multiplicand and
	STA AUXMUL             ; put it in the scratchpad.
	LDA STACKBASE + 4,X
	STA AUXMUL + 1
	PHA
	LDA #0
	STA STACKBASE + 3       ; Zero - out the original multiplicand area
	STA STACKBASE + 4
	PLA
	LDY #$10                ; We'll loop 16 times.
shift_loop:
	ASL STACKBASE + 3,X     ; Shift the entire 32 bits over one bit position.
	ROL STACKBASE + 4,X
	ROL STACKBASE + 1,X
	ROL STACKBASE + 2,X
	BCC skip_add            ; Skip the adding -in to the result if the high bit shifted out was 0
	CLC                     ; Else, add multiplier to intermediate result.
	LDA AUXMUL
	ADC STACKBASE + 3,X
	STA STACKBASE + 3,X
	LDA AUXMUL + 1
	ADC STACKBASE + 4,X
	STA STACKBASE + 4,X
	LDA #0
	ADC STACKBASE + 1,X
	STA STACKBASE + 1,X
skip_add:
	DEY                      ; If we haven't done 16 iterations yet,
	BNE  shift_loop          ; then go around again.
	INX
	INX
	STX SP16
	RTS
	; https://www.ahl27.com/posts/2022/12/SIXTH-div/
DIV16WITHMOD:
;; MAX ITERATIONS IS 16 = 0X10, SINCE WE HAVE 16 BIT NUMBERS
	LDX SP16
	LDY #$10
	;; ADD TWO SPACES ON STACK
	DEX
	DEX
	DEX
	DEX
	LDA #0
	STA STACKBASE + 1,X; REMAINDER
	STA STACKBASE + 2,X
	STA STACKBASE + 3,X; QUOTIENT
	STA STACKBASE + 4,X
	; +5 - 6 IS DENOMINATOR
	; +7 - 8 IS NUMERATOR
	;; SET UP THE NUMERATOR
	LDA #0
	ORA STACKBASE + 8,X
	ORA STACKBASE + 7,X
	BEQ EARLYEXIT
	;; CHECKING IS DENOMINATOR IS ZERO(IF SO WE'LL JUST STORE ZEROS)
	LDA #0
	ORA STACKBASE + 6,X
	ORA STACKBASE + 5,X
	BNE DIVMODLOOP1
EARLYEXIT:
	;; NUMERATOR OR DENOMINATOR ARE ZERO, JUST RETURN
	LDA #0
	STA STACKBASE + 6,X
	STA STACKBASE + 5,X
	INX
	INX
	INX
	INX
	RTS
	;; TRIM DOWN TO LEADING BIT
DIVMODLOOP1:
	LDA STACKBASE + 8,X
	BIT TEST_UPPER_BIT
	BNE END
	CLC
	ASL STACKBASE + 7,X
	ROL STACKBASE + 8,X
	DEY
	JMP DIVMODLOOP1
END:
	;; MAIN DIVISION LOOP
DIVMODLOOP2:
	;; LEFT - SHIFT THE REMAINDER
	CLC
	ASL STACKBASE + 1,X         
	ROL STACKBASE + 2,X
	;; LEFT - SHIFT THE QUOTIENT
	CLC
	ASL STACKBASE + 3,X
	ROL STACKBASE + 4,X
	;; SET LEAST SIGNIFICANT BIT TO BIT I OF NUMERATOR
	CLC
	ASL STACKBASE + 7,X
	ROL STACKBASE + 8,X
	LDA STACKBASE + 1,X
	ADC #0
	STA STACKBASE + 1,X
	LDA STACKBASE + 2,X
	ADC #0
	STA STACKBASE + 2,X
	;; COMPARE REMAINDER TO DENOMINATOR
	; UPPER BYTE(STACKBASE + 2 IS ALREADY IN A)
	CMP STACKBASE + 6,X
	BMI SKIP; IF R < D, SKIP TO NEXT ITERATION 
	BNE SUBTRACT; IF R > D, WE CAN SKIP COMPARING LOWER BYTE
; IF R = D, WE HAVE TO CHECK THE LOWER BYTE
	; LOWER BYTE
	LDA STACKBASE + 1,X
	CMP STACKBASE + 5,X
	BMI SKIP
SUBTRACT:
	;; SUBTRACT DENOMINATOR FROM REMAINDER
	SEC
	; SUBTRACT LOWER BYTE
	LDA STACKBASE + 1,X
	SBC STACKBASE + 5,X
	STA STACKBASE + 1,X
	; SUBTRACT UPPER BYTE
	LDA STACKBASE + 2,X
	SBC STACKBASE + 6,X
	STA STACKBASE + 2,X
	;; ADD ONE TO QUOTIENT
	INC STACKBASE + 3,X
SKIP:
	DEY
	BEQ EXIT
	JMP DIVMODLOOP2
EXIT:  
	;; CLEANUP
	LDA STACKBASE + 1,X
	STA STACKBASE + 5,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 6,X
	LDA STACKBASE + 3,X
	STA STACKBASE + 7,X
	LDA STACKBASE + 4,X
	STA STACKBASE + 8,X
	INX
	INX
	INX
	INX
	RTS
DIV16:
	JSR DIV16WITHMOD
	INX
	INX
	RTS
MOD16:
	JSR DIV16WITHMOD
	LDA STACKBASE + 1,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 4,X
	INX
	INX
	RTS
MALLOC:
	CLC
	ADC HEAPTOP
	STA HEAPTOP
	BCC NOCARRY
	INC HEAPTOP+1
NOCARRY:
	LDA HEAPTOP
	STA STACKACCESS
	LDA HEAPTOP + 1
	STA STACKACCESS + 1
	JSR PUSH16
	RTS
str0: BYTE 67,65,90,90
str1: BYTE 73,76,76,79
str2: BYTE 76,79,71,32
str3: BYTE 83,73,32
str4: BYTE 70,85,78,71,69,33
str5: BYTE 45,45,45,45,45,45,45
V_const DS 2
V_const2 DS 2
V_const3 DS 2
V_const4 DS 2
V_log DS 2
V_test DS 2
HEAPSTART: