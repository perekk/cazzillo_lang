def 'HEIGHT' 10 * 40
def 'WIDTH' 10
def 'SCREEN' 1024
def 'BUFFER' 10000
def 'LIFE_CHAR' 81 !<
def 'DEAD_CHAR' 32 !<

'time :[[ 256 * peek 161] + peek 162]

'fill :['base Number 'value Byte 
    'j 0
    while j < HEIGHT [
        'i 0
        while i < WIDTH [
            poke base + i + j value
            inc i
        ]
        j: j + 40
    ]
]

'init :[
    fill BUFFER DEAD_CHAR
    // put a glider on top left
    poke BUFFER + 2 LIFE_CHAR
    poke BUFFER + 40 LIFE_CHAR
    poke BUFFER + 42 LIFE_CHAR
    poke BUFFER + 81 LIFE_CHAR
    poke BUFFER + 82 LIFE_CHAR
]

// copy the buffer on the screen
'show :[
    'i 0
    while i < WIDTH [
        'j 0
        while j < HEIGHT [     
            'k i + j   
            poke SCREEN + k peek BUFFER + k
            j: j + 40
        ]
        inc i
    ]
]

'get_num_neigh :['base Number 'x Number 'y Number
    'index base + y + x
    'n 0
    if LIFE_CHAR = peek index - 41 [inc n]
    if LIFE_CHAR = peek index - 40 [inc n]
    if LIFE_CHAR = peek index - 39 [inc n]

    if LIFE_CHAR = peek index - 1 [inc n]
    if LIFE_CHAR = peek index + 1 [inc n]

    if LIFE_CHAR = peek index + 39 [inc n]
    if LIFE_CHAR = peek index + 40 [inc n]
    if LIFE_CHAR = peek index + 41 [inc n]
    n
]

'step :[
    'i 0
    while i < WIDTH [
        'j 0
        while j < HEIGHT [
            'k i + j
            'cell_state peek SCREEN + k
            'n_neigborough get_num_neigh SCREEN j i
            'new_state cell_state
            either cell_state = LIFE_CHAR [
                if n_neigborough < 2 [new_state: DEAD_CHAR]
                if n_neigborough > 3 [new_state: DEAD_CHAR]
            ] [
                if n_neigborough = 3 [new_state: LIFE_CHAR]
            ]
            poke BUFFER + k new_state
            j: j + 40
        ]
        inc i
    ]
]


'start time
init

'i 0
while i < 10 [
    show
    step
    inc i
]
'end time
print start
print end
prin "ELAPSED: " print end - start

// 686 
// 469 (con inc)
// 467
// 567 (con macro)

