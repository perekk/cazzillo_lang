def HEIGHT 10
def WIDTH 10
def CELL_COUNT [HEIGHT * WIDTH]
def SCREEN_START 1024
def BUFFER_START 10000
def LIFE_CHAR [81 !<]
def DEAD_CHAR [32 !<]

'time :[[ 256 * peek 161] + peek 162]

'fill :['value Byte 
    'j BUFFER_START
    while j < BUFFER_START + CELL_COUNT [
      poke j value
      inc j
    ]
]

'init :[
    fill DEAD_CHAR
    // put a glider on top left
    poke BUFFER_START + 2 LIFE_CHAR
    poke BUFFER_START + WIDTH LIFE_CHAR
    poke BUFFER_START + WIDTH + 2 LIFE_CHAR
    poke BUFFER_START + WIDTH + WIDTH + 1 LIFE_CHAR
    poke BUFFER_START + WIDTH + WIDTH + 2 LIFE_CHAR
]

// copy the buffer on the screen
'show :[
    'buffer BUFFER_START
    'screen SCREEN_START
    'col 0
    while buffer < BUFFER_START + CELL_COUNT [
        poke screen peek buffer
        inc buffer
        inc screen
        inc col
        if col = WIDTH [screen: screen + 40 - WIDTH col: 0]
    ]
]

'get_num_alive_old :['index Number
    'n 0 !<
    index: index - 41
    if LIFE_CHAR = peek index [inc n]
    inc index
    if LIFE_CHAR = peek index [inc n]
    inc index
    if LIFE_CHAR = peek index [inc n]
    
    index: index + 38
    if LIFE_CHAR = peek index [inc n]
    inc index
    inc index
    if LIFE_CHAR = peek index [inc n]

    index: index + 38
    if LIFE_CHAR = peek index [inc n]
    inc index
    if LIFE_CHAR = peek index [inc n]
    inc index
    if LIFE_CHAR = peek index [inc n]
    n
]

;def addOneIfAlive [n: n + [LIFE_CHAR = peek index] !<]
def addOneIfAlive [if LIFE_CHAR = peek index [inc n]]

'n 0 !<

'get_num_alive :['index Number
    n: 0 !<    
    index: index - 41
    addOneIfAlive
    inc index
    addOneIfAlive
    inc index
    addOneIfAlive
    
    index: index + 38
    addOneIfAlive
    inc index
    inc index
    addOneIfAlive

    index: index + 38
    addOneIfAlive
    inc index
    addOneIfAlive
    inc index
    addOneIfAlive
    n
]

'step :[
    'from_loc SCREEN_START
    'to_loc BUFFER_START
    'col 0
    while to_loc < BUFFER_START + CELL_COUNT [
        'nalive get_num_alive from_loc 
        'cell_state peek from_loc        
        either cell_state = LIFE_CHAR [            
            either nalive = 2 [
              poke to_loc LIFE_CHAR
            ] [
              either nalive = 3 [
                poke to_loc  LIFE_CHAR
              ][
                poke to_loc DEAD_CHAR
              ]
            ]            
        ] [
            either nalive = 3 [
              poke to_loc LIFE_CHAR
            ] [
              poke to_loc DEAD_CHAR
            ]
        ]        
        inc from_loc
        inc to_loc
        inc col 
        if col = WIDTH [from_loc: from_loc + 40 - WIDTH col: 0]        
    ]
]

'start time
init

'i 0
while i < 10 [
    show
    step
    inc i
]
'end time
print start
print end
prin "ELAPSED: " print end - start

; timing: 
; 686 
; 469 (with inc)
; 467 with variables
; 567 (with macro)
; 557 optimize count neigb.
; 498 loop optimization (403 with variables)
; 386 with preprocess and optimization on MUL
; 313 with optimize ASM (push pop reduction)
; 301 with either instead of two if
; 299 using byte as alive counter
; 294 optimizing EQ for byte
; 291 using global variable n in alive counter
; 287 use poke in either





