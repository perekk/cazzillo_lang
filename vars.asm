	processor 6502 ; TEH BEAST
	ORG $0801 ; BASIC STARTS HERE
	HEX 0C 08 0A 00 9E 20 32 30 36 34 00 00 00
	ORG $0810 ; MY PROGRAM STARTS HERE
	JSR INITSTACK
	; 1:4 VAL PIPPO
	LDA #0
	STA STACKACCESS+1
	LDA #5
	STA STACKACCESS
	JSR PUSH16
	LDA #>str0
	STA STACKACCESS+1
	LDA #<str0
	STA STACKACCESS
	JSR PUSH16
	; 1:1 a
	JSR POP16
	LDA STACKACCESS
	STA V_a + 2
	LDA STACKACCESS + 1
	STA V_a + 3
	JSR POP16
	LDA STACKACCESS
	STA V_a
	LDA STACKACCESS + 1
	STA V_a + 1
	; 2:4 VAL 4234
	LDA #16
	STA STACKACCESS+1
	LDA #138
	STA STACKACCESS
	JSR PUSH16
	; 2:1 b
	JSR POP16
	LDA STACKACCESS
	STA V_b
	LDA STACKACCESS + 1
	STA V_b + 1
	; 3:4 VAL 123
	LDA #0
	STA STACKACCESS+1
	LDA #123
	STA STACKACCESS
	JSR PUSH16
	; 3:10 b
	LDA V_b
	STA STACKACCESS
	LDA V_b + 1
	STA STACKACCESS + 1
	JSR PUSH16
	; 3:8 +
	JSR ADD16
	; 3:1 c
	JSR POP16
	LDA STACKACCESS
	STA V_c
	LDA STACKACCESS + 1
	STA V_c + 1
	; 4:4 VAL 1
	LDA #0
	STA STACKACCESS+1
	LDA #1
	STA STACKACCESS
	JSR PUSH16
	; 4:8 VAL 2
	LDA #0
	STA STACKACCESS+1
	LDA #2
	STA STACKACCESS
	JSR PUSH16
	; 4:6 =
	LDX SP16
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BNE notequal10
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BNE notequal10
	LDA #01
	JMP store10
notequal10:
	LDA #00
store10:
	INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	STX SP16
	; 4:1 d
	JSR POP16
	LDA STACKACCESS
	STA V_d
	; 5:4 VAL 1
	LDA #0
	STA STACKACCESS+1
	LDA #1
	STA STACKACCESS
	JSR PUSH16
	; 5:6 !
	LDX SP16
	LDA STACKBASE + 1,X
	EOR #$FF
	STA STACKBASE + 1,X
	LDA STACKBASE + 2,X
	EOR #$FF
	STA STACKBASE + 2,X
	LDA #2
	STA STACKACCESS
	LDA #0
	STA STACKACCESS + 1
	JSR PUSH16
	JSR ADD16
	; 5:1 e
	JSR POP16
	LDA STACKACCESS
	STA V_e
	LDA STACKACCESS + 1
	STA V_e + 1
	; 7:7 a
	LDA V_a
	STA STACKACCESS
	LDA V_a + 1
	STA STACKACCESS + 1
	JSR PUSH16
	LDA V_a + 2
	STA STACKACCESS
	LDA V_a + 3
	STA STACKACCESS + 1
	JSR PUSH16
	; 7:1 print
	JSR PRINT_STRING
	LDA #13
	JSR $FFD2
	; 7:15 b
	LDA V_b
	STA STACKACCESS
	LDA V_b + 1
	STA STACKACCESS + 1
	JSR PUSH16
	; 7:9 print
	JSR POP16
	JSR PRINT_INT
	; 7:23 c
	LDA V_c
	STA STACKACCESS
	LDA V_c + 1
	STA STACKACCESS + 1
	JSR PUSH16
	; 7:17 print
	JSR POP16
	JSR PRINT_INT
	; 7:31 d
	LDA V_d
	STA STACKACCESS
	LDA #0
	STA STACKACCESS + 1
	JSR PUSH16
	; 7:25 print
	JSR POP16
	LDA STACKACCESS
	BNE print_true22
	LDA STACKACCESS + 1
	BNE print_true22
	LDA #78 ; 'N'
	JMP print_bool22
print_true22:
	LDA #89 ; 'Y'
print_bool22:
	JSR $FFD2
	LDA #13
	JSR $FFD2
	; 7:39 e
	LDA V_e
	STA STACKACCESS
	LDA V_e + 1
	STA STACKACCESS + 1
	JSR PUSH16
	; 7:33 print
	JSR POP16
	JSR PRINT_INT
	RTS
BCD DS 3 ; USED IN BIN TO BCD
SP16 = $7D
STACKACCESS = $0080
STACKBASE = $0000
PRINT_STRING:
	JSR POP16
	LDX SP16
	LDA STACKBASE + 1,X; LEN
	INX
	INX
	STX SP16
	TAX; IN X WE HAVE THE LEN
	LDY #0
LOOP_PRINT_STRING:
	LDA (STACKACCESS),Y
	JSR $FFD2
	INY
	DEX
	BNE LOOP_PRINT_STRING
	RTS
	; stack.a65 from https://github.com/dourish/mitemon/blob/master/stack.a65
INITSTACK:
	LDX #$FF
	STX SP16
	RTS
PUSH16:
	LDX SP16
	LDA STACKACCESS + 1
	STA STACKBASE,X
	DEX
	LDA STACKACCESS
	STA STACKBASE,X
	DEX
	STX SP16
	RTS
POP16:
	LDX SP16
	LDA STACKBASE + 1,X
	STA STACKACCESS
	INX
	LDA STACKBASE + 1,X
	STA STACKACCESS + 1
	INX
	STX SP16
	RTS
DUP16:
	LDX SP16
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	STX SP16
	RTS
SWAP16:
	LDX SP16
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 5,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 6,X
	STA STACKBASE + 4,X
	LDA STACKBASE + 1,X
	STA STACKBASE + 5,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 6,X
	INX
	INX
	STX SP16
	RTS
ADD16:
	LDX SP16
	CLC
	LDA STACKBASE + 1,X;
	ADC STACKBASE + 3,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 2,X
	ADC STACKBASE + 4,X
	STA STACKBASE + 4,X
	INX
	INX
	STX SP16
	RTS
SUB16:
	LDX SP16
	SEC
	LDA STACKBASE + 3,X
	SBC STACKBASE + 1,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 4,X
	SBC STACKBASE + 2,X
	STA STACKBASE + 4,X
	INX
	INX
	STX SP16
	RTS
BINBCD16: SED
	LDA #0
	STA BCD + 0
	STA BCD + 1
	STA BCD + 2
	LDX #16
CNVBIT: ASL STACKACCESS + 0
	ROL STACKACCESS + 1
	LDA BCD + 0
	ADC BCD + 0
	STA BCD + 0
	LDA BCD + 1
	ADC BCD + 1
	STA BCD + 1
	LDA BCD + 2
	ADC BCD + 2
	STA BCD + 2
	DEX
	BNE CNVBIT
	CLD
	RTS
PRINT_INT:
	JSR BINBCD16
	LDA BCD+2
	TAY
	BEQ DIGIT2
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
DIGIT2:
	LDA BCD+1
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_2
	CPY #00
	BEQ DIGIT_3
PRINT_DIGIT_2:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_3:
	LDA BCD+1
	AND #$0F
	BNE PRINT_DIGIT_3
	CPY #00
	BEQ DIGIT_4
PRINT_DIGIT_3:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_4:
	LDA BCD+0
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_4
	CPY #00
	BEQ DIGIT_5
PRINT_DIGIT_4:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_5:
	LDA BCD+0
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
	LDA #13
	JSR $FFD2
	RTS
str0: BYTE 80,73,80,80,79
V_a DS 4
V_b DS 2
V_c DS 2
V_d DS 1
V_e DS 2