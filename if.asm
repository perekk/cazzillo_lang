	processor 6502 ; TEH BEAST
	ORG $0801 ; BASIC STARTS HERE
	HEX 0C 08 0A 00 9E 20 32 30 36 34 00 00 00
	ORG $0810 ; MY PROGRAM STARTS HERE
	JSR INITSTACK
	; 1:14 VAL 2
	LDA #0
	STA STACKACCESS+1
	LDA #2
	STA STACKACCESS
	JSR PUSH16
	; 1:18 VAL 2
	LDA #0
	STA STACKACCESS+1
	LDA #2
	STA STACKACCESS
	JSR PUSH16
	; 1:16 <
	LDA STACKBASE + 4,X
	CMP STACKBASE + 2,X
	BCC L1
	BNE L2
	LDA STACKBASE + 3,X
	CMP STACKBASE + 1,X
	BCC L1
L2: LDA #00
	JMP L3
L1: LDA #01
L3: INX
	INX
	STA STACKBASE + 1,X
	LDA #00
	STA STACKBASE + 2
	LDA STACKBASE + 1,X
	BNE trueblock
	LDA STACKBASE + 2,X
	BNE trueblock
	JMP elseblock ; if all zero
trueblock:
	; 1:22 VAL 69
	LDA #0
	STA STACKACCESS+1
	LDA #69
	STA STACKACCESS
	JSR PUSH16
	; 1:22 [...]
	; TODO
	JMP endblock
elseblock:
	; 1:27 VAL 420
	LDA #1
	STA STACKACCESS+1
	LDA #164
	STA STACKACCESS
	JSR PUSH16
	; 1:27 [...]
	; TODO
	; 1:7 either
endblock:
	; 1:1 print
	JSR POP16
	JSR PRINT_INT
	RTS
AUX_REG DS 1 ; USED IN ADD INSTRUCTION
BCD DS 3 ; USED IN BIN TO BCD
	; stack.a65 from https://github.com/dourish/mitemon/blob/master/stack.a65
STACKACCESS = $0080
STACKBASE = $0000
INITSTACK:
	LDX #$FF
	RTS
PUSH16:
	LDA STACKACCESS + 1
	STA STACKBASE,X
	DEX
	LDA STACKACCESS
	STA STACKBASE,X
	DEX
	RTS
POP16:
	LDA STACKBASE + 1,X
	STA STACKACCESS
	INX
	LDA STACKBASE + 1,X
	STA STACKACCESS + 1
	INX
	RTS
DUP16:
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	RTS
SWAP16:
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 2,X
	STA STACKBASE,X
	DEX
	LDA STACKBASE + 5,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 6,X
	STA STACKBASE + 4,X
	LDA STACKBASE + 1,X
	STA STACKBASE + 5,X
	LDA STACKBASE + 2,X
	STA STACKBASE + 6,X
	INX
	INX
	RTS
ADD16:
	CLC
	LDA STACKBASE + 1,X;
	ADC STACKBASE + 3,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 2,X
	ADC STACKBASE + 4,X
	STA STACKBASE + 4,X
	INX
	INX
	RTS
SUB16:
	SEC
	LDA STACKBASE + 3,X
	SBC STACKBASE + 1,X
	STA STACKBASE + 3,X
	LDA STACKBASE + 4,X
	SBC STACKBASE + 2,X
	STA STACKBASE + 4,X
	INX
	INX
	RTS
BINBCD16: SED
	LDA #0
	STA BCD + 0
	STA BCD + 1
	STA BCD + 2
	LDX #16
CNVBIT: ASL STACKACCESS + 0
	ROL STACKACCESS + 1
	LDA BCD + 0
	ADC BCD + 0
	STA BCD + 0
	LDA BCD + 1
	ADC BCD + 1
	STA BCD + 1
	LDA BCD + 2
	ADC BCD + 2
	STA BCD + 2
	DEX
	BNE CNVBIT
	CLD
	RTS
PRINT_INT:
	JSR BINBCD16
	LDA BCD+2
	TAY
	BEQ DIGIT2
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
DIGIT2:
	LDA BCD+1
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_2
	CPY #00
	BEQ DIGIT_3
PRINT_DIGIT_2:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_3:
	LDA BCD+1
	AND #$0F
	BNE PRINT_DIGIT_3
	CPY #00
	BEQ DIGIT_4
PRINT_DIGIT_3:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_4:
	LDA BCD+0
	LSR
	LSR
	LSR
	LSR
	BNE PRINT_DIGIT_4
	CPY #00
	BEQ DIGIT_5
PRINT_DIGIT_4:
	TAY
	CLC
	ADC #$30
	JSR $FFD2
DIGIT_5:
	LDA BCD+0
	AND #$0F
	CLC
	ADC #$30
	JSR $FFD2
	LDA #13
	JSR $FFD2
	RTS